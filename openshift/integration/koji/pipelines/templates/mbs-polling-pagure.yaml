# Template to produce a new OpenShift pipeline job for polling for Pagure branches or PRs
#
---
apiVersion: v1
kind: Template
metadata:
  name: mbs-polling-to-pagure
labels:
  template: mbs-polling-to-pagure
parameters:
- name: NAME
  displayName: Short unique identifier for the templated instances
  description: This field is used to deploy multiple pipelines to one OpenShift project from this template.
  required: true
  value: mbs-polling-to-pagure
- name: PAGURE_REPO_NAME
  displayName: Pagure project name
  description: <username>/<namespace>/<repo>
  required: true
  value: fm-orchestrator
- name: PAGURE_REPO_IS_FORK
  displayName: Is the Pagure repo a fork?
  required: true
  value: "false"
- name: PAGURE_POLLING_FOR_PR
  displayName: set to 'true' to poll for PRs, or 'false' for the master branch
  required: true
  value: "false"
- name: PAGURE_URL
  displayName: Pagure URL
  value: "https://pagure.io"
- name: PAGURE_POLLING_SCHEDULE
  displayName: Schedule of polling
  description: using cron-style syntax
  required: true
  value: "H/5 * * * *"
- name: PAGURE_POLLED_BRANCH
  displayName: Name of polled branch
  required: true
  value: "master"
- name: PREMERGE_JOB_NAME
  displayName: Downstream pre-merge job name
  required: true
  value: mbs-premerge
- name: POSTMERGE_JOB_NAME
  displayName: Downstream post-merge job name
  required: true
  value: mbs-postmerge
- name: PIPELINE_UPDATE_JOBS_DIR
  displayName: location of pipeline job definitions for auto update
  value: jobs
  required: false
- name: JENKINS_AGENT_IMAGE
  displayName: Container image for Jenkins slave pods
  required: true
  value: quay.io/factory2/mbs-jenkins-slave:latest
- name: JENKINS_AGENT_CLOUD_NAME
  displayName: Name of OpenShift cloud in Jenkins master configuration
  required: true
  value: openshift
objects:
- kind: ServiceAccount
  apiVersion: v1
  metadata:
    name: "${NAME}-jenkins-slave"
    labels:
      app: "${NAME}"
- kind: RoleBinding
  apiVersion: v1
  metadata:
    name: "${NAME}-jenkins-slave_edit"
    labels:
      app: "${NAME}"
  subjects:
  - kind: ServiceAccount
    name: "${NAME}-jenkins-slave"
  roleRef:
    name: edit
- kind: "BuildConfig"
  apiVersion: "v1"
  metadata:
    name: "${NAME}"
    labels:
      app: "${NAME}"
  spec:
    runPolicy: "Parallel"
    completionDeadlineSeconds: 1800
    strategy:
      type: JenkinsPipeline
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          // Don't use external Jenkinsfile here, or Jenkins will also poll on that repo and branch
          library identifier: 'c3i@master', changelog: false,
            retriever: modernSCM([$class: 'GitSCMSource', remote: 'https://pagure.io/c3i-library.git'])
          pipeline {
            agent {
              kubernetes {
                cloud "${JENKINS_AGENT_CLOUD_NAME}"
                label "jenkins-slave-${UUID.randomUUID().toString()}"
                serviceAccount "${NAME}-jenkins-slave"
                defaultContainer 'jnlp'
                yaml """
                apiVersion: v1
                kind: Pod
                metadata:
                  labels:
                    app: "jenkins-${env.JOB_BASE_NAME.take(50)}"
                    factory2-pipeline-kind: "mbs-polling-to-pagure-pipeline"
                    factory2-pipeline-build-number: "${env.BUILD_NUMBER}"
                spec:
                  containers:
                  - name: jnlp
                    image: "${JENKINS_AGENT_IMAGE}"
                    imagePullPolicy: Always
                    tty: true
                    resources:
                      requests:
                        memory: 512Mi
                        cpu: 300m
                      limits:
                        memory: 768Mi
                        cpu: 500m
                """
              }
            }
            options {
              timestamps()
              timeout(time: 60, unit: 'MINUTES')
              buildDiscarder(logRotator(numToKeepStr: '10'))
              skipDefaultCheckout()
            }
            environment {
              PIPELINE_NAMESPACE = readFile('/run/secrets/kubernetes.io/serviceaccount/namespace').trim()
              PAGURE_URL = "${PAGURE_URL}"
              PAGURE_API = "${env.PAGURE_URL}/api/0"
              PAGURE_REPO_NAME = "${PAGURE_REPO_NAME}"
              PAGURE_REPO_IS_FORK = "${PAGURE_REPO_IS_FORK}"
              PAGURE_POLLING_FOR_PR = "${PAGURE_POLLING_FOR_PR}"
              PAGURE_REPO_HOME = "${env.PAGURE_URL}${env.PAGURE_REPO_IS_FORK == 'true' ? '/fork' : ''}/${env.PAGURE_REPO_NAME}"
              GIT_URL = "${env.PAGURE_URL}/${env.PAGURE_REPO_IS_FORK == 'true' ? 'forks/' : ''}${env.PAGURE_REPO_NAME}.git"
              PREMERGE_JOB_NAME = "${PREMERGE_JOB_NAME}"
              POSTMERGE_JOB_NAME = "${POSTMERGE_JOB_NAME}"
            }
            triggers { pollSCM("${PAGURE_POLLING_SCHEDULE}") }
            stages {
              stage('Prepare') {
                agent { label 'master' }
                steps {
                  script {
                    def polled = env.PAGURE_POLLING_FOR_PR == 'true' ? 'pull/*/head' : "${PAGURE_POLLED_BRANCH}"
                    // Need to prefix the rev with origin/ for pollSCM to work correctly
                    def rev = "origin/${polled}"
                    def scmVars = c3i.clone(repo: env.GIT_URL, branch: polled, rev: rev)
                    env.GIT_COMMIT = scmVars.GIT_COMMIT
                    // setting build display name
                    def prefix = 'origin/'
                    def branch = scmVars.GIT_BRANCH.startsWith(prefix) ? scmVars.GIT_BRANCH.substring(prefix.size())
                      : scmVars.GIT_BRANCH // origin/pull/1234/head -> pull/1234/head, origin/master -> master
                    env.MBS_GIT_BRANCH = branch
                    echo "Build on branch=${env.MBS_GIT_BRANCH}, commit=${env.GIT_COMMIT}"
                    if (env.PAGURE_POLLING_FOR_PR == 'false') {
                      currentBuild.displayName = "${env.MBS_GIT_BRANCH}: ${env.GIT_COMMIT.substring(0, 7)}"
                      currentBuild.description = """<a href="${env.PAGURE_REPO_HOME}/c/${env.GIT_COMMIT}">${currentBuild.displayName}</a>"""
                    } else if (env.PAGURE_POLLING_FOR_PR == 'true' && branch ==~ /^pull\/[0-9]+\/head$/) {
                      env.PR_NO = branch.split('/')[1]
                      def prInfo = pagure.getPR(env.PR_NO)
                      if (prInfo.status == 'Open') {
                        env.PR_URL = "${env.PAGURE_REPO_HOME}/pull-request/${env.PR_NO}"
                        // To HTML syntax in build description, go to `Jenkins/Global Security/Markup Formatter` and select 'Safe HTML'.
                        def pagureLink = """<a href="${env.PR_URL}">PR#${env.PR_NO}</a>"""
                        echo "Building PR #${env.PR_NO}: ${env.PR_URL}"
                        currentBuild.displayName = "PR#${env.PR_NO}"
                        currentBuild.description = pagureLink
                      } else {
                        echo "Skipping PR#${env.PR_NO} because it is ${prInfo.status}"
                        env.SKIP = 'true'
                      }
                    } else { // This shouldn't happen.
                      error("Build is aborted due to unexpected polling trigger actions.")
                    }
                  }
                }
              }
              stage('Update pipeline jobs') {
                when {
                  expression {
                    return "${PIPELINE_UPDATE_JOBS_DIR}" && env.PAGURE_POLLING_FOR_PR == 'false' && env.MBS_GIT_BRANCH == "${PAGURE_POLLED_BRANCH}"
                  }
                }
                steps {
                  script {
                    c3i.clone(repo: env.GIT_URL, branch: env.MBS_GIT_BRANCH)
                    dir('openshift/integration/koji/pipelines') {
                      sh '''
                      make install JOBS_DIR="${PIPELINE_UPDATE_JOBS_DIR}"
                      '''
                    }
                  }
                }
              }
              stage('Build') {
                when {
                  not {
                    environment name: 'SKIP', value: 'true'
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      echo 'Starting a MBS build run...'
                      def devBuild = c3i.build(script: this,
                        objs: "bc/${env.PAGURE_POLLING_FOR_PR == 'true' ? env.PREMERGE_JOB_NAME : env.POSTMERGE_JOB_NAME}",
                        '-e', "MBS_GIT_REF=${env.MBS_GIT_BRANCH}"
                      )
                      c3i.waitForBuildStart(script: this, build: devBuild)
                      def devBuildInfo = devBuild.object()
                      def downstreamBuildName = devBuildInfo.metadata.name
                      def downstreamBuildUrl = devBuildInfo.metadata.annotations['openshift.io/jenkins-build-uri']
                      echo "Downstream build ${downstreamBuildName}(${downstreamBuildUrl}) started."
                    }
                  }
                }
              }
            }
          }
